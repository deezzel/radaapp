/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package model;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;
import model.baseclass.BaseEntity;

/**
 *
 * @author Julia
 */
@Entity
@Table(name = "users", catalog = "rada", schema = "", uniqueConstraints = {
    @UniqueConstraint(columnNames = {"login"})})
@XmlRootElement
@NamedQueries({
    @NamedQuery(name = "Users.findAll", query = "SELECT u FROM Users u"),
    @NamedQuery(name = "Users.findById", query = "SELECT u FROM Users u WHERE u.id = :id"),
    @NamedQuery(name = "Users.findByLogin", query = "SELECT u FROM Users u WHERE u.login = :login"),
    @NamedQuery(name = "Users.findByName", query = "SELECT u FROM Users u WHERE u.name = :name"),
    @NamedQuery(name = "Users.findByPassword", query = "SELECT u FROM Users u WHERE u.password = :password"),
    @NamedQuery(name = "Users.findBySecname", query = "SELECT u FROM Users u WHERE u.secname = :secname"),
    @NamedQuery(name = "Users.findByPatronymic", query = "SELECT u FROM Users u WHERE u.patronymic = :patronymic"),
    @NamedQuery(name = "Users.findByPhone", query = "SELECT u FROM Users u WHERE u.phone = :phone"),
    @NamedQuery(name = "Users.findByRoleuser", query = "SELECT u FROM Users u WHERE u.roleuser = :roleuser")})
public class Users extends BaseEntity implements Serializable {
    private static final long serialVersionUID = 1L;
    
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 30)
    @Column(name = "login", nullable = false, length = 30)
    private String login;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 30)
    @Column(name = "Name", nullable = false, length = 30)
    private String name;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 20)
    @Column(name = "password", nullable = false, length = 20)
    private String password;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 35)
    @Column(name = "Secname", nullable = false, length = 35)
    private String secname;
    @Size(max = 38)
    @Column(name = "Patronymic", length = 38)
    private String patronymic;
    // @Pattern(regexp="^\\(?(\\d{3})\\)?[- ]?(\\d{3})[- ]?(\\d{4})$", message="Invalid phone/fax format, should be as xxx-xxx-xxxx")//if the field contains phone or fax number consider using this annotation to enforce field validation
    @Size(max = 20)
    @Column(name = "Phone", length = 20)
    private String phone;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 15)
    @Column(name = "Role_user", nullable = false, length = 15)
    private String roleuser;
    @OneToMany(mappedBy = "avtor")
    private List<Protocol> protocolList;
    @OneToMany(mappedBy = "avtor")
    private List<Comment> commentList;
    @OneToMany(mappedBy = "avtor")
    private List<Publication> publicationList;

    public void addPublication (Publication publ) {
        if (null != publicationList && null != publ) {
            publicationList.add(publ);
        } else {
          //  publicationList = new ArrayList<Publication>();
        }
    }
    
     public boolean delPublication (Publication publ) {
        if (null != publicationList && null != publ) {
           return publicationList.remove(publ);
        } else {
            return false;
              }
    }
    
    
    public void addComment (Comment comm) {
        if (null != commentList && null != comm){
            commentList.add(comm);
        } else {
           // publicationList = new ArrayList<Publication>();
        }
    }
    
    public boolean delComment (Comment comm) {
        if (null != commentList && null != comm){
            return commentList.remove(comm);
        } else {
          return false; 
        }
    }
    
    public void addProtocol (Protocol prot) {
        if (null != protocolList && null != prot){
            protocolList.add(prot);
        } else {
           // ppublicationList = new ArrayList<Publication>();
        }
    }
    
     public boolean delProtocol (Protocol prot) {
        if (null != protocolList && null != prot){
            return protocolList.remove(prot);
        } else {
           return false;
        }
    }
    
    public Users() {
    }

    public Users(Long id) {
        this.id = id;
    }

    public Users(Long id, String login, String name, String password, String secname, String roleuser) {
        this.id = id;
        this.login = login;
        this.name = name;
        this.password = password;
        this.secname = secname;
        this.roleuser = roleuser;
    }

    
    public String getLogin() {
        return login;
    }

    public void setLogin(String login) {
        this.login = login;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getSecname() {
        return secname;
    }

    public void setSecname(String secname) {
        this.secname = secname;
    }

    public String getPatronymic() {
        return patronymic;
    }

    public void setPatronymic(String patronymic) {
        this.patronymic = patronymic;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public String getRoleuser() {
        return roleuser;
    }

    public void setRoleuser(String roleuser) {
        this.roleuser = roleuser;
    }

    @XmlTransient
    public List<Protocol> getProtocolList() {
        return protocolList;
    }

    public void setProtocolList(List<Protocol> protocolList) {
        this.protocolList = protocolList;
    }

    @XmlTransient
    public List<Comment> getCommentList() {
        return commentList;
    }

    public void setCommentList(List<Comment> commentList) {
        this.commentList = commentList;
    }

    @XmlTransient
    public List<Publication> getPublicationList() {
        return publicationList;
    }

    public void setPublicationList(List<Publication> publicationList) {
        this.publicationList = publicationList;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (id != null ? id.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof Users)) {
            return false;
        }
        Users other = (Users) object;
        if (((this.id == null && other.id != null)
                || (this.id != null && !this.id.equals(other.id)))
                || ((this.login == null && other.login != null)
                || (this.login != null && !this.login.equals(other.login)))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "model.Users[ id=" + id + ", login=" + login + ", password=" + password + ", name=" + name + " ]";
    }
    
}
